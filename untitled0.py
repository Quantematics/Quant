# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Nwx389hP7xgNmB7c9nTwsOf0dK5NTuRm
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

def geometric_brownian_motion(s_0, mu, sigma,t, dt, n):
    
    paths= []
    
    for i in range(n):
        prices= [s_0]
        time = 0
        
        while(time+dt<t):
            prices.append(prices[-1]*np.exp((mu- .5*sigma**2))* dt + sigma*np.random.normal(0, np.sqrt(dt)))
            time += dt
        
        if t - (time) > 0:
            prices.append(prices[-1]*np.exp((mu- .5*sigma**2))* dt + sigma*np.random.normal(0, np.sqrt(t-time)))
        
        paths.append(prices)
        
    return paths

s_0 = 100
mu=0.8
sigma=3
t=1
dt=1/100
n=100

sample_path= geometric_brownian_motion(s_0, mu, sigma, t, dt, n)
for path in sample_path:
    plt.plot(path)

import numpy as np
!pip install Riskfolio-Lib
!pip install yfinance
import pandas as pd
import yfinance as yf
import warnings

warnings.filterwarnings("ignore")
pd.options.display.float_format = '{:.4%}'.format

# Date range
start = '2016-01-01'
end = '2019-12-30'

# Tickers of assets
assets = ['JCI', 'TGT', 'CMCSA', 'CPB', 'MO', 'APA', 'MMC', 'JPM',
          'ZION', 'PSA', 'BAX', 'BMY', 'LUV', 'PCAR', 'TXT', 'TMO',
          'DE', 'MSFT', 'HPQ', 'SEE', 'VZ', 'CNP', 'NI', 'T', 'BA']
assets.sort()

# Downloading data
data = yf.download(assets, start = start, end = end)
data = data.loc[:,('Adj Close', slice(None))]
data.columns = assets
# Calculating returns
Y = data[assets].pct_change().dropna()
display(Y.head())

import riskfolio as rp

# Plotting Assets Clusters

ax = rp.plot_dendrogram(returns=Y,
                        codependence='pearson',
                        linkage='single',
                        k=None,
                        max_k=10,
                        leaf_order=True,
                        ax=None)